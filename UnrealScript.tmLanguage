<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>uc</string>
		<string>uci</string>
	</array>

	<key>foldingStartMarker</key>
	<string>/\*\*|\{\s*$</string>

	<key>foldingStopMarker</key>
	<string>\*\*/|^\s*\}</string>

	<key>keyEquivalent</key>
	<string>^~U</string>

	<key>name</key>
	<string>UnrealScript</string>

	<key>patterns</key>
	<array>
		<!-- /* ... */ -->
		<dict>
			<key>begin</key>
			<string>/\*</string>

			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.source.uc</string>
				</dict>
			</dict>

			<key>end</key>
			<string>\*/</string>

			<key>name</key>
			<string>comment.block.source.uc</string>
		</dict>

		<!--<dict>
			<key>match</key>
			<string>\b(?i:(@(TODO|HACK|FIXME|PARAM|RETURN)))\b</string>
			<key>name</key>
			<string>comment.block.source.uc</string>
		</dict>-->

		<!-- ... */ ... \n -->
		<dict>
			<key>match</key>
			<string>\*/.*\n</string>

			<key>name</key>
			<string>invalid.illegal.stray-comment-end.source.uc</string>
		</dict>

		<!-- // ... \n -->
		<dict>
			<key>begin</key>
			<string>//</string>

			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.source.uc</string>
				</dict>
			</dict>

			<key>end</key>
			<string>$\n?</string>

			<key>name</key>
			<string>comment.line.double-slash.source.uc</string>

			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&gt;\\\s*\n)</string>
					<key>name</key>
					<string>punctuation.separator.continuation.source.uc</string>
				</dict>
			</array>
		</dict>

		<!-- preprocessor dict -->
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.language.source.uc</string>
				</dict>

				<key>2</key>
				<dict>
					<key>name</key>
					<string>constant.language.source.uc</string>
				</dict>
			</dict>

			<key>match</key>
			<string>(`)(?i:(if|else|endif|define|undefine|include|isdefined|notdefined|log|logd|warn|assert))?(.*{0})</string>
		</dict>

		<!-- Although these are modifiers, it's nice to keep them in sync with class, interface, struct, and state -->
		<dict>
			<key>match</key>
			<string>\b(?i:(extends|expands|within))\b</string>
			<key>name</key>
			<string>keyword.language.source.uc</string>
		</dict>

		<!-- declaration keywords(var is defined else where) -->
		<dict>
			<key>match</key>
			<string>\b(?i:(class|interface|event|function|state|ignores|const|local|struct|enum|operator|preoperator|postoperator))\b</string>
			<key>name</key>
			<string>keyword.language.source.uc</string>
		</dict>

		<!-- block keywords -->
		<dict>
			<key>match</key>
			<string>((?i:\b(((structdefaultproperties|defaultproperties|cpptext|structcpptext|cppstruct|replication))|)\b)(i:[\s\n]*\{)?)|((?i:\b(begin\s+object)|(end\s+object))\b)</string>
			<key>name</key>
			<string>keyword.language.source.uc</string>
		</dict>

		<!--
			Parses the following(FIXME: except for test4):

			var() bool test1;
			var(a) bool test2;
			var(b, c) bool test3;
			var(d, e, f) bool test4;
		-->
		<dict>
			<key>captures</key>
			<dict>
				<!-- var -->
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.language.source.uc</string>
				</dict>
				
				<!-- (, ) -->
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.language.source.uc</string>
				</dict>

				<!-- first NAME -->
				<key>3</key>
				<dict>
					<key>name</key>
					<string>string.quoted.single.unrealscript</string>
				</dict>

				<!-- second NAME -->
				<key>4</key>
				<dict>
					<key>name</key>
					<string>string.quoted.single.unrealscript</string>
				</dict>
			</dict>

			<key>match</key>
			<string>\b(?i:(var))\b(\s*?\(\s*?([a-z-A-Z_]*?[0-9]*?)\s*?,?\s*?([a-z-A-Z_]*?[0-9]*?)\s*?\))?</string>
		</dict>

		<!--
			Parses the following:

			config
			config(NAME)
			dllbind(NAME) FIXME: also dllbind 
		-->
		<dict>
			<key>captures</key>
			<dict>
				<!-- config|dllbind -->
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.source.uc</string>
				</dict>
				
				<!-- ( ) -->
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.language.source.uc</string>
				</dict>
				
				<!-- NAME -->
				<key>3</key>
				<dict>
					<key>name</key>
					<string>string.quoted.single.unrealscript</string>
				</dict>
			</dict>

			<key>match</key>
			<string>\b(?i:(config|dllbind))\b(\s*?\(\s*?([a-z-A-Z_]*?[0-9]*?)\s*?\))?</string>
		</dict>

		<!-- modifier keywords (config is defined else where)-->
		<dict>
			<key>match</key>
			<string>\b(?i:(abstract|native|intrinsic|noexport|nativereplication|hidecategories|public|private|transient|deprecated|editconst|static|final|simulated|out|localized|globalconfig|protected|auto|notplaceable|placeable|dependson|implements|skip|coerce|iterator|immutable|immutablewhencooked|atomic|atomicwhencooked|interp|editoronly|reliable|server|exec|editinline|repnotify|optional|virtual|edithide|editinlinenew|automated|cache|cacheexempt|noimport|noclear|protectedwrite|privatewrite|forcescriptorder|perobjectconfig|perobjectlocalized))\b</string>
			<key>name</key>
			<string>storage.modifier.source.uc</string>
		</dict>

		<!-- literal keywords -->
		<dict>
			<key>match</key>
			<string>\b(?i:(none|true|false|vect|rot|rng))\b</string>
			<key>name</key>
			<string>constant.language.source.uc</string>
		</dict>

		<!-- specifier keywords -->
		<dict>
			<key>match</key>
			<!-- 
				class'a' 
					?.const.constName 
					?.static.functionName 
					?.default.varName

			 	super|global|static.functionName 
			 	self|default|const.fieldName
			-->
			<string>\b(?i:(default|super|global|static|const|self))\b</string>
			<key>name</key>
			<string>constant.language.source.uc</string>
		</dict>

		<!-- Built-in data types -->
		<dict>
			<key>match</key>
			<string>\b(?i:(byte|int|bool|array|map|delegate|button|class|float|name|string))\b</string>
			<key>name</key>
			<string>storage.type.source.uc</string>
		</dict>

		<!-- Metafields(http://wiki.beyondunreal.com/Metadata ... An article I wrote on metadata - Eliot) -->
		<dict>
			<key>match</key>
			<string>\b(?i:(AllowAbstract|ArrayClamp|AutoComment|bShowOnlyWhenTrue|ClampMax|ClampMin|DisplayName|DMCOnly|EditCondition|FixedIncrement|FullyExpand|MaxPropertyDepth|MultilineWithMaxRows|Multiple|OrderIndex|RealTime|ScriptOrder|ToolTip|UIMax|UIMin))=\b</string>
			<key>name</key>
			<string>keyword.type.source.uc</string>
		</dict>

		<!-- Common objects -->
		<dict>
			<key>match</key>
			<string>\b(?i:(Actor|ActorComponent|Component|Pawn|WorldInfo|PhysicalMaterial|SoundCue|ParticleSystem|SkeletalMeshComponent|Controller|PlayerController|DamageType|StaticMeshComponent|PlayerReplicationInfo|Canvas|HUD|Volume|PhysicsVolume|FluidSurfaceActor|SequenceEvent|Sequence|Object|SpriteComponent|Inventory|PrimitiveComponent|ParticleSystemComponent|LightEnvironmentComponent|ForceFeedbackWaveform|AudioComponent|DynamicLightEnvironmentComponent|LightEnvironment|Components|StaticMesh|MaterialInterface|LadderVolume|PlayerStart|CylinderComponent|InventoryManager|Weapon|Mesh|PlayerInput|GFxClikWidget|GFxObject|PlayerOwner|Material|WidgetBindings|Instigator))\b</string>
			<key>name</key>
			<string>storage.type.source.uc</string>
		</dict>

		<!-- Common data structures -->
		<dict>
			<key>match</key>
			<string>\b(?i:(rotator|vector|scale|quat|qword|double|color|pointer|linearcolor|vector2d|vector4|twovectors|plane|intpoint|guid|box|boxspherebounds|matrix|cylinder|BoneAtom))\b</string>
			<key>name</key>
			<string>storage.struct.source.uc</string>
		</dict>

		<!-- Common enumerations -->
		<dict>
			<key>match</key>
			<string>\b(?i:(AlphaBlendType|EAxis|EInputEvent|EPhysics|ENetRole|ECollisionType|ETickingGroup|EDoubleClickDir|ETravelType|EMoveDir|EActorMetricsType))\b</string>
			<key>name</key>
			<string>storage.enum.source.uc</string>
		</dict>

		<!-- Common constants defined in Object and Actor that serve a purpose in subclasses -->
		<dict>
			<key>match</key>
			<string>\b(?i:(MaxInt|RadToDeg|DegToRad|UnrRotToRad|RadToUnrRot|DegToUnrRot|UnrRotToDeg|INDEX_NONE|Pi|AspectRatio4x3|AspectRatio5x4|AspectRatio16x9|InvAspectRatio4x3|InvAspectRatio5x4|InvAspectRatio16x9|MINFLOORZ|ACTORMAXSTEPHEIGHT|TRACEFLAG_Bullet|TRACEFLAG_PhysicsVolumes|TRACEFLAG_SkipMovers|TRACEFLAG_Blocking))\b</string>
			<key>name</key>
			<string>storage.constant.source.uc</string>
		</dict>

		<!-- UnrealScript flow keywords -->
		<dict>
			<key>match</key>
			<string>\b(?i:(filtereditoronly|if|else|break|continue|do|until|while|goto|assert|return|for|foreach|switch|case))\b</string>
			<key>name</key>
			<string>keyword.control.source.uc</string>
		</dict>

		<!-- compile constants(assert is actually an hardcoded function - Eliot) -->
		<dict>
			<key>match</key>
			<string>\b(?i:(nameof|arraycount|enumcount))\b</string>
			<key>name</key>
			<string>constant.language.source.uc</string>
		</dict>

		<!-- decimals and hexadecimals -->
		<dict>
			<key>match</key>
			<string>\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)(F|f)?\b</string>
			<key>name</key>
			<string>constant.numeric.source.uc</string>
		</dict>

		<!-- Matches any puncation and known named operators -->
		<dict>
			<key>match</key>
			<string>([?+\-/%*=&lt;&gt;^+~!|&amp;$@]+)|(\b(?i:(Dot|Cross|ClockwiseFrom|New)?)\b)</string>
			<key>name</key>
			<string>keyword.operator.source.uc</string>
		</dict>

		<dict>
			<key>match</key>
			<string>([?,.;()\[\]{}]+)</string>
			<key>name</key>
			<string>punctuation.language.source.uc</string>
		</dict>

		<dict>
			<key>begin</key>
			<string>"</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.c</string>
				</dict>
			</dict>
			<key>end</key>
			<string>"</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.c</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.double.unrealscript</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string_escaped_char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string_placeholder</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>'</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.c</string>
				</dict>
			</dict>
			<key>end</key>
			<string>'</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.c</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.single.unrealscript</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string_escaped_char</string>
				</dict>
			</array>
		</dict>
	</array>

	<key>repository</key>
	<dict>
		<key>access</key>
		<dict>
			<key>match</key>
			<string>\.[a-zA-Z_][a-zA-Z_0-9]*\b(?!\s*\()</string>
			<key>name</key>
			<string>variable.other.dot-access.c</string>
		</dict>

		<key>block</key>
		<dict>
			<key>begin</key>
			<string>\{</string>

			<key>end</key>
			<string>\}</string>

			<key>name</key>
			<string>meta.block.c</string>

			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#block_innards</string>
				</dict>
			</array>
		</dict>

		<key>block_innards</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.C99.c</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(\s*)\b(hypot(f|l)?|s(scanf|ystem|nprintf|ca(nf|lb(n(f|l)?|ln(f|l)?))|i(n(h(f|l)?|f|l)?|gn(al|bit))|tr(s(tr|pn)|nc(py|at|mp)|c(spn|hr|oll|py|at|mp)|to(imax|d|u(l(l)?|max)|k|f|l(d|l)?)|error|pbrk|ftime|len|rchr|xfrm)|printf|et(jmp|vbuf|locale|buf)|qrt(f|l)?|w(scanf|printf)|rand)|n(e(arbyint(f|l)?|xt(toward(f|l)?|after(f|l)?))|an(f|l)?)|c(s(in(h(f|l)?|f|l)?|qrt(f|l)?)|cos(h(f)?|f|l)?|imag(f|l)?|t(ime|an(h(f|l)?|f|l)?)|o(s(h(f|l)?|f|l)?|nj(f|l)?|pysign(f|l)?)|p(ow(f|l)?|roj(f|l)?)|e(il(f|l)?|xp(f|l)?)|l(o(ck|g(f|l)?)|earerr)|a(sin(h(f|l)?|f|l)?|cos(h(f|l)?|f|l)?|tan(h(f|l)?|f|l)?|lloc|rg(f|l)?|bs(f|l)?)|real(f|l)?|brt(f|l)?)|t(ime|o(upper|lower)|an(h(f|l)?|f|l)?|runc(f|l)?|gamma(f|l)?|mp(nam|file))|i(s(space|n(ormal|an)|cntrl|inf|digit|u(nordered|pper)|p(unct|rint)|finite|w(space|c(ntrl|type)|digit|upper|p(unct|rint)|lower|al(num|pha)|graph|xdigit|blank)|l(ower|ess(equal|greater)?)|al(num|pha)|gr(eater(equal)?|aph)|xdigit|blank)|logb(f|l)?|max(div|abs))|di(v|fftime)|_Exit|unget(c|wc)|p(ow(f|l)?|ut(s|c(har)?|wc(har)?)|error|rintf)|e(rf(c(f|l)?|f|l)?|x(it|p(2(f|l)?|f|l|m1(f|l)?)?))|v(s(scanf|nprintf|canf|printf|w(scanf|printf))|printf|f(scanf|printf|w(scanf|printf))|w(scanf|printf)|a_(start|copy|end|arg))|qsort|f(s(canf|e(tpos|ek))|close|tell|open|dim(f|l)?|p(classify|ut(s|c|w(s|c))|rintf)|e(holdexcept|set(e(nv|xceptflag)|round)|clearexcept|testexcept|of|updateenv|r(aiseexcept|ror)|get(e(nv|xceptflag)|round))|flush|w(scanf|ide|printf|rite)|loor(f|l)?|abs(f|l)?|get(s|c|pos|w(s|c))|re(open|e|ad|xp(f|l)?)|m(in(f|l)?|od(f|l)?|a(f|l|x(f|l)?)?))|l(d(iv|exp(f|l)?)|o(ngjmp|cal(time|econv)|g(1(p(f|l)?|0(f|l)?)|2(f|l)?|f|l|b(f|l)?)?)|abs|l(div|abs|r(int(f|l)?|ound(f|l)?))|r(int(f|l)?|ound(f|l)?)|gamma(f|l)?)|w(scanf|c(s(s(tr|pn)|nc(py|at|mp)|c(spn|hr|oll|py|at|mp)|to(imax|d|u(l(l)?|max)|k|f|l(d|l)?|mbs)|pbrk|ftime|len|r(chr|tombs)|xfrm)|to(b|mb)|rtomb)|printf|mem(set|c(hr|py|mp)|move))|a(s(sert|ctime|in(h(f|l)?|f|l)?)|cos(h(f|l)?|f|l)?|t(o(i|f|l(l)?)|exit|an(h(f|l)?|2(f|l)?|f|l)?)|b(s|ort))|g(et(s|c(har)?|env|wc(har)?)|mtime)|r(int(f|l)?|ound(f|l)?|e(name|alloc|wind|m(ove|quo(f|l)?|ainder(f|l)?))|a(nd|ise))|b(search|towc)|m(odf(f|l)?|em(set|c(hr|py|mp)|move)|ktime|alloc|b(s(init|towcs|rtowcs)|towc|len|r(towc|len))))\b</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.function-call.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.any-method.c</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.c</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x) (?: (?= \s )  (?:(?&lt;=else|new|return) | (?&lt;!\w)) (\s+))?
			(\b 
				(?!(while|for|do|if|else|switch|catch|enumerate|return|r?iterate)\s*\()(?:(?!NS)[A-Za-z_][A-Za-z0-9_]*+\b | :: )++                  # actual name
			)
			 \s*(\()</string>
					<key>name</key>
					<string>meta.function-call.c</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.c</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
			        (?x)
			(?:  
			     (?: (?= \s )           (?&lt;!else|new|return) (?&lt;=\w)\s+      #  or word + space before name
			     )
			)
			(
				(?: [A-Za-z_][A-Za-z0-9_]*+ | :: )++    |              # actual name
				(?: (?&lt;=operator) (?: [-*&amp;&lt;&gt;=+!]+ | \(\) | \[\] ) )?  # if it is a C++ operator
			)
			 \s*(\()</string>
					<key>name</key>
					<string>meta.initialization.c</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#block</string>
				</dict>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>

		<key>cpptext</key>
		<dict>
			<key>begin</key>
			<string>\b(?i:(cpptext))\b</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.embedded.c++.unrealscript</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?&lt;=\})</string>
			<key>name</key>
			<string>source.embedded.c++.unrealscript</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\{</string>
					<key>end</key>
					<string>\}</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>source.c++</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>

		<key>parens</key>
		<dict>
			<key>begin</key>
			<string>\(</string>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>meta.parens.c</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>

		<key>string_escaped_char</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\(\\|[abefnprtv'"?]|[0-3]\d{,2}|[4-7]\d?|x[a-fA-F0-9]{,2})</string>
					<key>name</key>
					<string>constant.character.escape.c</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\.</string>
					<key>name</key>
					<string>invalid.illegal.unknown-escape.c</string>
				</dict>
			</array>
		</dict>
		<key>string_placeholder</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?x)%
    						(\d+\$)?                             # field (argument #)
    						[#0\- +']*                           # flags
    						[,;:_]?                              # separator character (AltiVec)
    						((-?\d+)|\*(-?\d+\$)?)?              # minimum field width
    						(\.((-?\d+)|\*(-?\d+\$)?)?)?         # precision
    						(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)? # length modifier
    						[diouxXDOUeEfFgGaACcSspn%]           # conversion type
    					</string>
					<key>name</key>
					<string>constant.other.placeholder.c</string>
				</dict>
				<dict>
					<key>match</key>
					<string>%</string>
					<key>name</key>
					<string>invalid.illegal.placeholder.c</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.unrealscript</string>
	<key>uuid</key>
	<string>077E5343-191C-4618-BB9F-FED76FAD1B8C</string>
</dict>
</plist>